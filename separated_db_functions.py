"""
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 4 –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –≤ Supabase:
1. students - —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
2. course_cg - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É –¶–ì 
3. course_python - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É Python
4. course_analysis - –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
"""

import streamlit as st
import pandas as pd
from datetime import datetime
import time

def create_separated_tables(supabase):
    """–°–æ–∑–¥–∞–Ω–∏–µ 4 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: —Å—Ç—É–¥–µ–Ω—Ç—ã + 3 –∫—É—Ä—Å–∞"""
    try:
        st.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ 4 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students_sql = """
        CREATE TABLE IF NOT EXISTS students (
            id SERIAL PRIMARY KEY,
            –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ TEXT UNIQUE NOT NULL,
            —Ñ–∏–æ TEXT NOT NULL,
            —Ñ–∏–ª–∏–∞–ª_–∫–∞–º–ø—É—Å TEXT,
            —Ñ–∞–∫—É–ª—å—Ç–µ—Ç TEXT,
            –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞ TEXT,
            –≤–µ—Ä—Å–∏—è_–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π_–ø—Ä–æ–≥—Ä–∞–º–º—ã TEXT,
            –≥—Ä—É–ø–ø–∞ TEXT,
            –∫—É—Ä—Å TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_students_email ON students(–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞);
        """
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–∞ –¶–ì
        course_cg_sql = """
        CREATE TABLE IF NOT EXISTS course_cg (
            id SERIAL PRIMARY KEY,
            –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ TEXT UNIQUE NOT NULL,
            –ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è REAL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_course_cg_email ON course_cg(–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞);
        """
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–∞ Python
        course_python_sql = """
        CREATE TABLE IF NOT EXISTS course_python (
            id SERIAL PRIMARY KEY,
            –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ TEXT UNIQUE NOT NULL,
            –ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è REAL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_course_python_email ON course_python(–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞);
        """
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–∞ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        course_analysis_sql = """
        CREATE TABLE IF NOT EXISTS course_analysis (
            id SERIAL PRIMARY KEY,
            –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ TEXT UNIQUE NOT NULL,
            –ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è REAL,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        CREATE INDEX IF NOT EXISTS idx_course_analysis_email ON course_analysis(–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞);
        """
        
        # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        analytics_view_sql = """
        CREATE OR REPLACE VIEW course_analytics_full AS
        SELECT 
            s.id as student_id,
            s.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞,
            s.—Ñ–∏–æ,
            s.—Ñ–∏–ª–∏–∞–ª_–∫–∞–º–ø—É—Å,
            s.—Ñ–∞–∫—É–ª—å—Ç–µ—Ç,
            s.–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞,
            s.–≤–µ—Ä—Å–∏—è_–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π_–ø—Ä–æ–≥—Ä–∞–º–º—ã,
            s.–≥—Ä—É–ø–ø–∞,
            s.–∫—É—Ä—Å,
            cg.–ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è as –ø—Ä–æ—Ü–µ–Ω—Ç_—Ü–≥,
            cp.–ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è as –ø—Ä–æ—Ü–µ–Ω—Ç_–ø–∏—Ç–æ–Ω,
            ca.–ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è as –ø—Ä–æ—Ü–µ–Ω—Ç_–∞–Ω–¥–∞–Ω,
            s.created_at,
            s.updated_at
        FROM students s
        LEFT JOIN course_cg cg ON s.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ = cg.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞
        LEFT JOIN course_python cp ON s.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ = cp.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞
        LEFT JOIN course_analysis ca ON s.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞ = ca.–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞;
        """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã
        tables = [
            ('students', students_sql),
            ('course_cg', course_cg_sql),
            ('course_python', course_python_sql),
            ('course_analysis', course_analysis_sql)
        ]
        
        for table_name, sql in tables:
            try:
                supabase.rpc('exec_sql', {'sql': sql}).execute()
                st.success(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {str(e)}")
                st.code(sql, language='sql')
                return False
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        try:
            supabase.rpc('exec_sql', {'sql': analytics_view_sql}).execute()
            st.success("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'course_analytics_full' —Å–æ–∑–¥–∞–Ω–æ")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {str(e)}")
            st.code(analytics_view_sql, language='sql')
            return False
        
        st.success("üéâ –í—Å–µ 4 –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        st.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 4 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü: {str(e)}")
        return False

def upload_students_to_supabase(supabase, student_data):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É students —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ UPSERT
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö Supabase –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        st.info("üë• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (UPSERT)...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è upsert
        records_for_upsert = []
        processed_emails = set()
        
        for _, row in student_data.iterrows():
            email = str(row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞', '')).strip().lower()
            if not email or '@edu.hse.ru' not in email:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if email in processed_emails:
                continue
            processed_emails.add(email)
                
            student_record = {
                '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞': email,
                '—Ñ–∏–æ': str(row.get('–§–ò–û', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')).strip() or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                '—Ñ–∏–ª–∏–∞–ª_–∫–∞–º–ø—É—Å': str(row.get('–§–∏–ª–∏–∞–ª (–∫–∞–º–ø—É—Å)', '')) if pd.notna(row.get('–§–∏–ª–∏–∞–ª (–∫–∞–º–ø—É—Å)')) and str(row.get('–§–∏–ª–∏–∞–ª (–∫–∞–º–ø—É—Å)', '')).strip() else None,
                '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç': str(row.get('–§–∞–∫—É–ª—å—Ç–µ—Ç', '')) if pd.notna(row.get('–§–∞–∫—É–ª—å—Ç–µ—Ç')) and str(row.get('–§–∞–∫—É–ª—å—Ç–µ—Ç', '')).strip() else None,
                '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞': str(row.get('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '')) if pd.notna(row.get('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')) and str(row.get('–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '')).strip() else None,
                '–≤–µ—Ä—Å–∏—è_–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π_–ø—Ä–æ–≥—Ä–∞–º–º—ã': str(row.get('–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã', '')) if pd.notna(row.get('–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã')) and str(row.get('–í–µ—Ä—Å–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã', '')).strip() else None,
                '–≥—Ä—É–ø–ø–∞': str(row.get('–ì—Ä—É–ø–ø–∞', '')) if pd.notna(row.get('–ì—Ä—É–ø–ø–∞')) and str(row.get('–ì—Ä—É–ø–ø–∞', '')).strip() else None,
                '–∫—É—Ä—Å': str(row.get('–ö—É—Ä—Å', '')) if pd.notna(row.get('–ö—É—Ä—Å')) and str(row.get('–ö—É—Ä—Å', '')).strip() else None,
            }
            records_for_upsert.append(student_record)
        
        if not records_for_upsert:
            st.info("üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return True
        
        st.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(records_for_upsert)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è UPSERT")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
        batch_size = 200  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        total_processed = 0
        
        for i in range(0, len(records_for_upsert), batch_size):
            batch = records_for_upsert[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = ((len(records_for_upsert) - 1) // batch_size) + 1
            
            try:
                # UPSERT —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = supabase.table('students').upsert(
                    batch,
                    on_conflict='–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞',  # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ email
                    ignore_duplicates=False,             # –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
                    returning='minimal'                  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                ).execute()
                
                batch_processed = len(batch)
                total_processed += batch_processed
                
                st.success(f"‚úÖ –ë–∞—Ç—á {batch_num}/{total_batches}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_processed} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                error_str = str(e)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                if any(error_pattern in error_str.lower() for error_pattern in [
                    "connectionterminated", "connection", "eof occurred in violation of protocol", 
                    "ssl", "timeout"
                ]):
                    st.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    import time
                    time.sleep(2)
                    
                    try:
                        result = supabase.table('students').upsert(
                            batch,
                            on_conflict='–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞',
                            ignore_duplicates=False,
                            returning='minimal'
                        ).execute()
                        
                        total_processed += len(batch)
                        st.success(f"‚úÖ –ë–∞—Ç—á {batch_num}/{total_batches}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(batch)} –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞)")
                        
                    except Exception as retry_error:
                        st.error(f"‚ùå –ë–∞—Ç—á {batch_num} –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞: {str(retry_error)}")
                        return False
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {batch_num}: {error_str}")
                    return False
        
        st.success(f"üéâ UPSERT –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(records_for_upsert)}")
        return True
        
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ UPSERT: {str(e)}")
def upload_course_data_to_supabase(supabase, course_data, course_name):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å upload_students_to_supabase
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫—É—Ä—Å–∞
        table_mapping = {
            '–¶–ì': 'course_cg',
            '–ü–∏—Ç–æ–Ω': 'course_python', 
            '–ê–Ω–¥–∞–Ω': 'course_analysis'
        }
        
        table_name = table_mapping.get(course_name)
        if not table_name:
            st.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å: {course_name}")
            return False
            
        st.info(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞ {course_name} –≤ —Ç–∞–±–ª–∏—Ü—É {table_name} (UPSERT)...")
        
        if course_data is None or course_data.empty:
            st.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—É—Ä—Å–∞ {course_name}")
            return True
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è upsert
        records_for_upsert = []
        processed_emails = set()
        
        for _, row in course_data.iterrows():
            email = str(row.get('–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞', '')).strip().lower()
            if not email or '@edu.hse.ru' not in email:
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if email in processed_emails:
                continue
            processed_emails.add(email)
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
            percent_col = f'–ü—Ä–æ—Ü–µ–Ω—Ç_{course_name}'
            progress_value = None
            
            if percent_col in row and pd.notna(row[percent_col]) and row[percent_col] != '':
                try:
                    progress_value = float(row[percent_col])
                except (ValueError, TypeError):
                    progress_value = None
            
            course_record = {
                '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞': email,
                '–ø—Ä–æ—Ü–µ–Ω—Ç_–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è': progress_value
            }
            records_for_upsert.append(course_record)
        
        if not records_for_upsert:
            st.info(f"üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫—É—Ä—Å–µ {course_name}")
            return True
        
        st.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(records_for_upsert)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è UPSERT –≤ –∫—É—Ä—Å–µ {course_name}")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
        batch_size = 200  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Supabase
        total_processed = 0
        
        for i in range(0, len(records_for_upsert), batch_size):
            batch = records_for_upsert[i:i + batch_size]
            batch_num = (i // batch_size) + 1
            total_batches = ((len(records_for_upsert) - 1) // batch_size) + 1
            
            try:
                # UPSERT —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = supabase.table(table_name).upsert(
                    batch,
                    on_conflict='–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞',  # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ email
                    ignore_duplicates=False,             # –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö
                    returning='minimal'                  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                ).execute()
                
                batch_processed = len(batch)
                total_processed += batch_processed
                
                st.success(f"‚úÖ –ö—É—Ä—Å {course_name} - –ë–∞—Ç—á {batch_num}/{total_batches}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_processed} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as e:
                error_str = str(e)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                if any(error_pattern in error_str.lower() for error_pattern in [
                    'connection', 'timeout', 'network', 'ssl', 'eof occurred in violation of protocol'
                ]):
                    retry_success = False
                    for retry_attempt in range(3):
                        try:
                            time.sleep(2 ** retry_attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
                            result = supabase.table(table_name).upsert(
                                batch,
                                on_conflict='–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è_–ø–æ—á—Ç–∞',
                                ignore_duplicates=False,
                                returning='minimal'
                            ).execute()
                            
                            batch_processed = len(batch)
                            total_processed += batch_processed
                            st.success(f"‚úÖ –ö—É—Ä—Å {course_name} - –ë–∞—Ç—á {batch_num}/{total_batches}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_processed} –∑–∞–ø–∏—Å–µ–π (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞)")
                            retry_success = True
                            break
                            
                        except Exception as retry_error:
                            if retry_attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                                st.error(f"‚ùå –ö—É—Ä—Å {course_name} - –ë–∞—Ç—á {batch_num}: —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {str(retry_error)}")
                            continue
                    
                    if not retry_success:
                        return False
                else:
                    st.error(f"‚ùå –ö—É—Ä—Å {course_name} - –ë–∞—Ç—á {batch_num}: {str(e)}")
                    return False
        
        st.success(f"üéâ –ö—É—Ä—Å {course_name}: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed} –∑–∞–ø–∏—Å–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT")
        return True
        
    except Exception as e:
        st.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞ {course_name}: {str(e)}")
        return False

def upload_all_courses_to_supabase(supabase, course_data_list, course_names):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        st.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        
        success_count = 0
        for course_data, course_name in zip(course_data_list, course_names):
            if upload_course_data_to_supabase(supabase, course_data, course_name):
                success_count += 1
        
        if success_count == len(course_names):
            st.success(f"üéâ –í—Å–µ {success_count} –∫—É—Ä—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            st.error(f"‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count} –∏–∑ {len(course_names)} –∫—É—Ä—Å–æ–≤")
            return False
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤: {str(e)}")
        return False